module transaction {
	
	interface ManageDemand {
		string createDemand(in string demand);
	};
	
	interface AnalyseDemand {
		string approveDemand(in string demandd);
	};
	
	interface ManageAccount {
		string creditAccount(in string demanddd);
	};
	
		
	typedef sequence<octet> TransactionID;
	typedef sequence<octet> ResourceID;
	exception NotPreparedException {} ;
	exception TransactionException {} ;
	
	interface TransactionResource {
		Object getService();
		void prepare() raises (NotPreparedException);
		void commit() raises(TransactionException);
		void rollback() raises(TransactionException);
	};
	
	typedef sequence<TransactionResource> Resources;
	interface TransactionCoordination {
		void registerResource(in TransactionResource resource );
		Resources getResources ();
	};

	interface Transaction {
		TransactionCoordination getCoordinator();
		ManageDemand addResource(in TransactionResource resource);
		void begin() raises(TransactionException);
		void commit() raises(TransactionException);
		void rollback() raises(TransactionException);
	};
	
	interface TransactionFactory {
		Transaction createTransaction();
	};

	interface TransactionManager {
		void registerResource(in TransactionResource resource );
		TransactionFactory getTransactionFactory();
	};

	
};
