
module transaction {
	
	typedef sequence<octet> TransactionID;
	exception NotPreparedException {} ;
	exception TransactionException {} ;
	
	interface TransactionResource {
		void prepare() raises (NotPreparedException);
		void commit() raises(TransactionException);
		void rollback() raises(TransactionException);
	};
	
	typedef sequence<TransactionResource> Resources;
	interface TransactionCoordination {
		void begin();
		void registerResource(in TransactionResource resource );
		Resources getResources ();
		void commit();
	};

	interface Transaction {
		TransactionCoordination getCoordinator();
		void begin() raises(TransactionException);
		void commit() raises(TransactionException);
		void rollback() raises(TransactionException);
	};
	
	interface TransactionFactory {
		Transaction createTransaction();
	};

	interface TransactionManager {
		void registerResource(in TransactionResource resource );
		TransactionFactory getTransactionFactory();
	};

	struct Demand {
		string demandID;
		string accountID;
		double amount;
	};
	
	struct ApprovedDemand {
		string approvedDemandID;
		Demand mydemand;
	};		
	
	struct Account {
		string accountID;
		double solde;
	};
	
	interface ManageDemand {
		Demand createDemand(in string accountID, in double amount); 
	};
	
	interface AnalyseDemand {
		ApprovedDemand approveDemand(in Demand mydemand);
	};
	
	interface ManageAccount {
		Account creditAccount(in ApprovedDemand demand);
	};
	
};
